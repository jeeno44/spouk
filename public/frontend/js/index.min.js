!function(){"use strict";$(function(){$.each($(".slides"),function(){new n($(this))})}),$(function(){$.each($(".news"),function(){new i($(this))})});var n=function(n){var i=this,o=n,t=$(window),s=function(){t.on({scroll:function(){c()}})},c=function(){var n=t.height();o.each(function(){var i=$(this),s=o.offset().top;t.scrollTop()>s-n/1.8&&!i.hasClass("animation")&&i.addClass("animation")})},a=function(){o[0].slides=i,s(),c()};a()},i=function(n){var i=n,o=i.find(".news__item"),t=$(window),s=function(){t.on({scroll:function(){c()}})},c=function(){var n=t.height(),s=i.offset().top-n+60;t.scrollTop()>s&&o.addClass("animation")},a=function(){s(),c()};a()}}();
"use strict";!function(){$(function(){$.each($(".site__footer-scroll"),function(){new n($(this))}),$.each($(".promo__swiper"),function(){new i($(this))})});var n=function(n){var i=n,o=$("body,html"),t=function(){c()},c=function(){i.on({click:function(){a()}})},a=function(){o.animate({scrollTop:0},400)};t()},i=function(n){var i,o=this,t=n,c=function(){},a=function(){i=new Swiper(t,{loop:!0,pagination:".swiper-pagination",paginationClicable:!0,autoplay:5e3,speed:600,autoplayDisableOnInteraction:!1})},e=function(){t[0].obj=o,c(),a()};e()}}();
!function(){$(function(){$(".popup").each(function(){new o($(this))})});var o=function(o){var n=this,t=40,i=$(".popup__open"),e=o,p=e.find(".popup__close, .popup__cancel"),c=e.find(".popup__wrap"),u=e.find(".popup__content"),s=$("html"),d=$(window),a=setTimeout(function(){},1),f=function(){d.height()-2*t-c.height()>0?c.css({top:(d.height()-2*t-c.height())/2}):c.css({top:0})},r=function(){var o,n=document.createElement("div");return n.className="popup__scrollbar-measure",document.body.appendChild(n),o=n.offsetWidth-n.clientWidth,document.body.removeChild(n),o},l=function(){e.css({overflowY:"hidden"}),s.css({overflowY:"auto",paddingRight:0}),e.removeClass("popup_opened"),e.addClass("popup_hide"),a=setTimeout(function(){e.css({overflowY:"auto"}),e.removeClass("popup_hide")},300)},h=function(){e[0].obj=n,_()},_=function(){d.on({resize:function(){f()}}),i.on({click:function(){return m($(this).attr("data-popup")),!1}}),c.on({click:function(o){o.stopPropagation()}}),e.on({click:function(){return l(),!1}}),p.on({click:function(){return l(),!1}})},m=function(o){v(o),s.css({overflowY:"hidden",paddingRight:r()}),e.addClass("popup_opened"),f()},v=function(o){var n=u.filter(".popup__"+o);u.css({display:"none"}),n.css({display:"block"})};h()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
